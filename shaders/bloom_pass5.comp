#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D bufferImageMip4;
layout(rgba16f, set = 0, binding = 1) uniform image2D bufferImageMip5;

layout( push_constant ) uniform constants
{
    ivec2 imageExtent;
    vec2 bufferImageExtent;
} PushConstants;



void main() {
    vec2 destCoord = vec2(gl_GlobalInvocationID.xy);

    if(destCoord.x < PushConstants.imageExtent.x / 32 && destCoord.y < PushConstants.imageExtent.y / 32) {
        vec2 srcTexelSize = 1.0 / PushConstants.bufferImageExtent * 16.0;

        vec2 texCoord = (destCoord * 2.0 + 1.0) * srcTexelSize;

        vec4 a = texture(bufferImageMip4, vec2(texCoord.x - 2 * srcTexelSize.x, texCoord.y + 2 * srcTexelSize.y));
        vec4 b = texture(bufferImageMip4, vec2(texCoord.x                     , texCoord.y + 2 * srcTexelSize.y));
        vec4 c = texture(bufferImageMip4, vec2(texCoord.x + 2 * srcTexelSize.x, texCoord.y + 2 * srcTexelSize.y));

        vec4 d = texture(bufferImageMip4, vec2(texCoord.x - 2 * srcTexelSize.x, texCoord.y));
        vec4 e = texture(bufferImageMip4, vec2(texCoord.x                     , texCoord.y));
        vec4 f = texture(bufferImageMip4, vec2(texCoord.x + 2 * srcTexelSize.x, texCoord.y));

        vec4 g = texture(bufferImageMip4, vec2(texCoord.x - 2 * srcTexelSize.x, texCoord.y - 2 * srcTexelSize.y));
        vec4 h = texture(bufferImageMip4, vec2(texCoord.x                     , texCoord.y - 2 * srcTexelSize.y));
        vec4 i = texture(bufferImageMip4, vec2(texCoord.x + 2 * srcTexelSize.x, texCoord.y - 2 * srcTexelSize.y));

        vec4 j = texture(bufferImageMip4, vec2(texCoord.x - srcTexelSize.x, texCoord.y + srcTexelSize.y));
        vec4 k = texture(bufferImageMip4, vec2(texCoord.x + srcTexelSize.x, texCoord.y + srcTexelSize.y));
        vec4 l = texture(bufferImageMip4, vec2(texCoord.x - srcTexelSize.x, texCoord.y - srcTexelSize.y));
        vec4 m = texture(bufferImageMip4, vec2(texCoord.x + srcTexelSize.x, texCoord.y - srcTexelSize.y));

        vec4 downsample = (a + c + g + i) * 0.03125 + (b + d + f + h) * 0.0625 + (e + j + k + l + m) * 0.125;
        downsample = max(downsample, 0.0001);

        imageStore(bufferImageMip5, ivec2(destCoord), downsample);
    }
}