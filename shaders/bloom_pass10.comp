#version 460

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D bufferImageMip1;
layout(rgba16f, set = 0, binding = 1) uniform writeonly image2D bufferImageMip0;

layout(push_constant) uniform constants
{
    ivec2 imageExtent;
    vec2 bufferImageExtent;
    float filterRadius;
} PushConstants;

void main() {
    vec2 destCoord = vec2(gl_GlobalInvocationID.xy);

    if (destCoord.x < PushConstants.imageExtent.x && destCoord.y < PushConstants.imageExtent.y)
    {
        vec2 srcTexelSize = 1.0 / PushConstants.bufferImageExtent * 2.0;

        vec2 texCoord = (destCoord / 2.0 + 0.25) * srcTexelSize;

        vec4 a = texture(bufferImageMip1, vec2(texCoord.x - PushConstants.filterRadius, texCoord.y + PushConstants.filterRadius));
        vec4 b = texture(bufferImageMip1, vec2(texCoord.x, texCoord.y + PushConstants.filterRadius));
        vec4 c = texture(bufferImageMip1, vec2(texCoord.x + PushConstants.filterRadius, texCoord.y + PushConstants.filterRadius));

        vec4 d = texture(bufferImageMip1, vec2(texCoord.x - PushConstants.filterRadius, texCoord.y));
        vec4 e = texture(bufferImageMip1, vec2(texCoord.x, texCoord.y));
        vec4 f = texture(bufferImageMip1, vec2(texCoord.x + PushConstants.filterRadius, texCoord.y));

        vec4 g = texture(bufferImageMip1, vec2(texCoord.x - PushConstants.filterRadius, texCoord.y - PushConstants.filterRadius));
        vec4 h = texture(bufferImageMip1, vec2(texCoord.x, texCoord.y - PushConstants.filterRadius));
        vec4 i = texture(bufferImageMip1, vec2(texCoord.x + PushConstants.filterRadius, texCoord.y - PushConstants.filterRadius));

        vec4 upsample = (e * 4.0 + (b + d + f + h) * 2.0 + (a + c + g + i)) / 16.0;

        imageStore(bufferImageMip0, ivec2(destCoord), upsample);
    }
}
